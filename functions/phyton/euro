import requests
from bs4 import BeautifulSoup
import json

def fetch_html(url):
    """
    Belirtilen URL'den HTML içeriğini çeker.
    Fetches HTML content from the given URL.
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # HTTP hataları için istisna fırlatır
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"URL'den veri çekilirken hata oluştu {url}: {e}")
        return None

def parse_eur_data(html_content):
    """
    Döviz sayfasından Euro fiyatlarını ayrıştırır.
    Parses EUR prices from the currency page based on the provided HTML structure.
    """
    if not html_content:
        return {}

    soup = BeautifulSoup(html_content, 'html.parser')
    eur_data = {}

    # 'kurDetail' sınıfına sahip div'i bul.
    # Euro için özel olarak 'Euro' metnini içeren h2 etiketini kontrol edebiliriz.
    kur_detail_div = soup.find('div', class_='kurDetail')
    if kur_detail_div and kur_detail_div.find('h2', class_='dName', string='Euro'):

        # Alış fiyatını bulmak için: 'ALIŞ(TL)' metnini içeren span'i bul, sonra onun ebeveyni olan div'deki 'value' span'i çek.
        alis_text_span = kur_detail_div.find('span', class_='text', string='ALIŞ(TL)')
        if alis_text_span:
            alis_box = alis_text_span.find_parent('div', class_='kurBox')
            if alis_box:
                alis_value = alis_box.find('span', class_='value')
                if alis_value:
                    eur_data['Euro Alış'] = alis_value.text.strip()

        # Satış fiyatını bulmak için: 'SATIŞ(TL)' metnini içeren span'i bul, sonra onun ebeveyni olan div'deki 'value' span'i çek.
        satis_text_span = kur_detail_div.find('span', class_='text', string='SATIŞ(TL)')
        if satis_text_span:
            satis_box = satis_text_span.find_parent('div', class_='kurBox')
            if satis_box:
                satis_value = satis_box.find('span', class_='value')
                if satis_value:
                    eur_data['Euro Satış'] = satis_value.text.strip()

        # Değişim oranını bul
        last_box = kur_detail_div.find('div', class_='kurBox last')
        if last_box:
            degisim_value = last_box.find('span', class_='text3')
            if degisim_value:
                eur_data['Euro Değişim'] = degisim_value.text.strip()
    
    # Güncelleme saati bu HTML yapısında bulunmadığı için kaldırıldı.
    return eur_data

def get_eur_price():
    """
    Bigpara'dan güncel Euro fiyatını çeker.
    Fetches current EUR price from Bigpara.
    """
    # URL'yi Euro detay sayfasına güncelledik
    doviz_url = "https://bigpara.hurriyet.com.tr/doviz/euro/"
    
    print(f"Euro verileri çekiliyor: {doviz_url}")
    doviz_html = fetch_html(doviz_url)
    if doviz_html:
        eur_prices = parse_eur_data(doviz_html)
        print("Euro verileri başarıyla çekildi.")
        return eur_prices
    else:
        print("Euro verileri çekilemedi.")
        return {}

# Fiyatı al ve JSON olarak yazdır
if __name__ == "__main__":
    prices = get_eur_price()
    if prices:
        # JSON formatında çıktı ver
        print(json.dumps(prices, ensure_ascii=False))
    else:
        print(json.dumps({}, ensure_ascii=False))
