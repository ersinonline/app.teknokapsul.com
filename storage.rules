rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Users can only upload/access files in their own directory
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Profile pictures - users can only access their own profile pictures
    match /profile-pictures/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading other users' profile pictures
    }
    
    // Document uploads - users can only access their own documents
    match /documents/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Receipts and invoices - users can only access their own files
    match /receipts/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Portfolio documents - users can only access their own portfolio files
    match /portfolio/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Family shared files - members can access family files
    match /families/{familyId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/families/$(familyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.members;
    }
    
    // File size and type restrictions
    match /{allPaths=**} {
      allow write: if request.resource.size < 10 * 1024 * 1024 && // 10MB limit
        request.resource.contentType.matches('image/.*|application/pdf|text/.*');
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}